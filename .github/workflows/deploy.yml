# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write
      statuses: write

    environment:
      name: EC2 (production)
      url: https://gotpop.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: EC2 (production)

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Check initial disk space
            echo "=== Initial Disk Usage ==="
            df -h | grep -E '/$|Filesystem'
            DISK_USAGE=$(df -h / | tail -1 | awk '{print $5}' | sed 's/%//')
            if [ "$DISK_USAGE" -gt 80 ]; then
              echo "⚠️  Warning: Disk usage is ${DISK_USAGE}% - cleaning up..."
              docker system prune -a -f --volumes
            fi

            # Clean up yarn cache (this is the main culprit!)
            echo "Cleaning up yarn cache..."
            yarn cache clean --all || true
            rm -rf /usr/local/share/.cache/yarn/* || true
            rm -rf ~/.cache/yarn/* || true

            # Clean up Docker before building to free space
            echo "Cleaning up Docker resources..."
            docker system prune -a -f --volumes
            df -h | grep -E '/$|Filesystem'

            cd /var/www/gotpop-blog
            git pull origin master

            # Stop and remove old container
            docker stop gotpop-blog || true
            docker rm gotpop-blog || true

            # Build new image with Storyblok token from .env file
            echo "Building Docker image..."
            STORYBLOK_TOKEN=$(grep STORYBLOK_ACCESS_TOKEN .env | cut -d '=' -f2)
            docker build --build-arg STORYBLOK_ACCESS_TOKEN="${STORYBLOK_TOKEN}" -t gotpop-blog .

            # Remove dangling images immediately after build
            docker image prune -f

            # Run new container
            docker run -d \
              -p 3000:3000 \
              --name gotpop-blog \
              --restart unless-stopped \
              --env-file .env \
              gotpop-blog

            # Final cleanup
            docker system prune -f

            echo "Deployment completed successfully!"
            echo "Disk usage after deployment:"
            df -h | grep -E '/$|Filesystem'
            docker ps
            docker logs gotpop-blog --tail 20

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: EC2 (production)
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://gotpop.io
