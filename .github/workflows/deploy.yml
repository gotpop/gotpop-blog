# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build and Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write
      statuses: write
      id-token: write

    environment:
      name: EC2 (production)
      url: https://gotpop.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: EC2 (production)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg STORYBLOK_ACCESS_TOKEN=${{ secrets.STORYBLOK_ACCESS_TOKEN }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .

          echo "Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "âœ… Image pushed successfully!"
          echo "Image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,AWS_REGION
          script: |
            echo "=== Deployment Started ==="

            # Login to ECR from EC2
            echo "Authenticating with ECR..."
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull new image
            echo "Pulling latest image from ECR..."
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

            # Stop and remove old container
            echo "Stopping old container..."
            docker stop gotpop-blog || true
            docker rm gotpop-blog || true

            # Run new container
            echo "Starting new container..."
            docker run -d \
              -p 3000:3000 \
              --name gotpop-blog \
              --restart unless-stopped \
              --env-file /var/www/gotpop-blog/.env \
              $ECR_REGISTRY/$ECR_REPOSITORY:latest

            # Comprehensive cleanup
            echo "Cleaning up Docker resources..."
            docker image prune -a -f
            docker container prune -f
            docker volume prune -f
            
            # Clean yarn cache on host (if it exists)
            echo "Cleaning yarn cache..."
            rm -rf /usr/local/share/.cache/yarn/* ~/.cache/yarn/* 2>/dev/null || true

            # Show status
            echo "=== Deployment Complete ==="
            echo "Container status:"
            docker ps --filter name=gotpop-blog
            echo ""
            echo "Recent logs:"
            docker logs gotpop-blog --tail 20
            echo ""
            echo "Disk usage:"
            df -h | grep -E '/$|Filesystem'

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: EC2 (production)
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://gotpop.io
